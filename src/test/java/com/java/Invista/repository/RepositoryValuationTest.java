package com.java.Invista.repository;

import com.java.Invista.entity.*;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.test.context.ActiveProfiles;

import java.util.List;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;

@DataJpaTest
@ActiveProfiles("test")
@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@DisplayName("Testes do RepositoryValuation")
class RepositoryValuationTest {

    @Autowired
    private RepositoryValuation repositoryValuation;

    @Autowired
    private RepositoryImovel repositoryImovel;

    @Test
    @Order(1)
    @DisplayName("Deve listar todas as avalia√ß√µes existentes")
    void deveListarTodasAsAvaliacoes() {
        System.out.println("üìà Testando listagem de todas as avalia√ß√µes...");

        // BUSCA TODAS AS AVALIA√á√ïES QUE J√Å EXISTEM
        List<ValuationEntity> avaliacoes = repositoryValuation.findAll();
        
        System.out.println("üìä Avalia√ß√µes encontradas: " + avaliacoes.size());
        avaliacoes.forEach(v -> System.out.println("  - Valor: R$ " + v.getValue() + 
            " (Im√≥vel ID: " + v.getImovel().getId_imovel() + ", Data: " + v.getDate() + ")"));
        
        // TESTE GEN√âRICO - s√≥ verifica se n√£o d√° erro
        assertThat(avaliacoes).isNotNull();
        
        if (!avaliacoes.isEmpty()) {
            assertThat(avaliacoes.get(0).getId()).isNotNull();
            assertThat(avaliacoes.get(0).getValue()).isNotNull();
            assertThat(avaliacoes.get(0).getDate()).isNotNull();
            assertThat(avaliacoes.get(0).getImovel()).isNotNull();
        }

        System.out.println("‚úÖ Teste de listagem passou!");
    }

    @Test
    @Order(2)
    @DisplayName("Deve buscar avalia√ß√£o mais recente por im√≥vel")
    void deveBuscarAvaliacaoMaisRecentePorImovel() {
        System.out.println("üîç Testando busca da avalia√ß√£o mais recente por im√≥vel...");

        // PEGA UM IM√ìVEL QUE TEM AVALIA√á√ïES
        List<ValuationEntity> todasAvaliacoes = repositoryValuation.findAll();
        
        if (!todasAvaliacoes.isEmpty()) {
            // PEGA O IM√ìVEL DA PRIMEIRA AVALIA√á√ÉO
            Long imovelId = todasAvaliacoes.get(0).getImovel().getId_imovel();
            
            System.out.println("üè† Buscando avalia√ß√£o mais recente do im√≥vel ID: " + imovelId);

            // TESTA A QUERY CUSTOMIZADA
            ValuationEntity avaliacaoMaisRecente = repositoryValuation.findByImovelId(imovelId);
            
            if (avaliacaoMaisRecente != null) {
                System.out.println("üìà Avalia√ß√£o mais recente encontrada:");
                System.out.println("  - Valor: R$ " + avaliacaoMaisRecente.getValue());
                System.out.println("  - Data: " + avaliacaoMaisRecente.getDate());
                System.out.println("  - ID: " + avaliacaoMaisRecente.getId());
                
                assertThat(avaliacaoMaisRecente.getImovel().getId_imovel()).isEqualTo(imovelId);
                assertThat(avaliacaoMaisRecente.getValue()).isNotNull();
                assertThat(avaliacaoMaisRecente.getDate()).isNotNull();
                
                // VERIFICA SE √â REALMENTE A MAIS RECENTE (se houver m√∫ltiplas)
                List<ValuationEntity> todasDoImovel = todasAvaliacoes.stream()
                    .filter(v -> v.getImovel().getId_imovel().equals(imovelId))
                    .toList();
                
                if (todasDoImovel.size() > 1) {
                    System.out.println("üîÑ Verificando se √© a mais recente entre " + todasDoImovel.size() + " avalia√ß√µes");
                    
                    // ENCONTRA A DATA MAIS RECENTE MANUALMENTE
                    ValuationEntity maisRecenteManual = todasDoImovel.stream()
                        .max((v1, v2) -> v1.getDate().compareTo(v2.getDate()))
                        .orElse(null);
                    
                    if (maisRecenteManual != null) {
                        assertThat(avaliacaoMaisRecente.getDate()).isEqualTo(maisRecenteManual.getDate());
                        System.out.println("‚úÖ Confirmado: √© a avalia√ß√£o mais recente!");
                    }
                }
            } else {
                System.out.println("‚ö†Ô∏è Nenhuma avalia√ß√£o encontrada para o im√≥vel " + imovelId);
            }
        } else {
            System.out.println("‚ö†Ô∏è Nenhuma avalia√ß√£o no banco para testar");
        }

        System.out.println("‚úÖ Teste de busca por im√≥vel passou!");
    }

    @Test
    @Order(3)
    @DisplayName("Deve retornar null para im√≥vel sem avalia√ß√µes")
    void deveRetornarNullParaImovelSemAvaliacoes() {
        System.out.println("üëª Testando im√≥vel sem avalia√ß√µes...");

        // BUSCA POR UM IM√ìVEL QUE EXISTE MAS N√ÉO TEM AVALIA√á√ïES
        List<ImovelEntity> imoveis = repositoryImovel.findAll();
        List<ValuationEntity> avaliacoes = repositoryValuation.findAll();
        
        // ENCONTRA UM IM√ìVEL SEM AVALIA√á√ïES
        Optional<ImovelEntity> imovelSemAvaliacao = imoveis.stream()
            .filter(imovel -> avaliacoes.stream()
                .noneMatch(av -> av.getImovel().getId_imovel().equals(imovel.getId_imovel())))
            .findFirst();
        
        if (imovelSemAvaliacao.isPresent()) {
            Long imovelId = imovelSemAvaliacao.get().getId_imovel();
            System.out.println("üè† Testando im√≥vel sem avalia√ß√µes ID: " + imovelId);
            
            ValuationEntity resultado = repositoryValuation.findByImovelId(imovelId);
            
            System.out.println("üìä Resultado para im√≥vel sem avalia√ß√µes: " + resultado);
            assertThat(resultado).isNull();
        } else {
            System.out.println("‚ö†Ô∏è Todos os im√≥veis t√™m avalia√ß√µes - usando ID inexistente");
            
            // USA ID QUE CERTAMENTE N√ÉO EXISTE
            ValuationEntity resultado = repositoryValuation.findByImovelId(99999L);
            assertThat(resultado).isNull();
        }

        System.out.println("‚úÖ Teste de im√≥vel sem avalia√ß√µes passou!");
    }

    @Test
    @Order(4)
    @DisplayName("Deve retornar null para im√≥vel inexistente") 
    void deveRetornarNullParaImovelInexistente() {
        System.out.println("üîç Testando im√≥vel inexistente...");

        // USA ID QUE CERTAMENTE N√ÉO EXISTE
        ValuationEntity resultado = repositoryValuation.findByImovelId(99999L);
        
        System.out.println("üìä Resultado para im√≥vel inexistente: " + resultado);
        assertThat(resultado).isNull();

        System.out.println("‚úÖ Teste de im√≥vel inexistente passou!");
    }

    @Test
    @Order(5)
    @DisplayName("Deve contar total de avalia√ß√µes")
    void deveContarTotalDeAvaliacoes() {
        System.out.println("üî¢ Testando contagem de avalia√ß√µes...");

        long totalAvaliacoes = repositoryValuation.count();
        
        System.out.println("üìä Total de avalia√ß√µes no banco: " + totalAvaliacoes);
        
        assertThat(totalAvaliacoes).isGreaterThanOrEqualTo(0);

        System.out.println("‚úÖ Teste de contagem passou!");
    }

    @Test
    @Order(6)
    @DisplayName("Deve validar estrutura das avalia√ß√µes")
    void deveValidarEstruturaDasAvaliacoes() {
        System.out.println("üèóÔ∏è Testando estrutura das avalia√ß√µes...");

        List<ValuationEntity> avaliacoes = repositoryValuation.findAll();
        
        if (!avaliacoes.isEmpty()) {
            ValuationEntity avaliacao = avaliacoes.get(0);
            
            System.out.println("üìã Validando avalia√ß√£o ID: " + avaliacao.getId());
            
            // VALIDA SE OS CAMPOS OBRIGAT√ìRIOS EXISTEM
            assertThat(avaliacao.getId()).isNotNull();
            assertThat(avaliacao.getValue()).isNotNull();
            assertThat(avaliacao.getDate()).isNotNull();
            assertThat(avaliacao.getImovel()).isNotNull();
            assertThat(avaliacao.getImovel().getId_imovel()).isNotNull();
            
            System.out.println("‚úÖ Estrutura v√°lida:");
            System.out.println("  - ID: " + avaliacao.getId());
            System.out.println("  - Valor: R$ " + avaliacao.getValue());
            System.out.println("  - Data: " + avaliacao.getDate());
            System.out.println("  - Im√≥vel ID: " + avaliacao.getImovel().getId_imovel());
            
        } else {
            System.out.println("‚ö†Ô∏è Nenhuma avalia√ß√£o no banco para validar estrutura");
        }

        System.out.println("‚úÖ Teste de estrutura passou!");
    }

    @Test
    @Order(7)
    @DisplayName("Deve validar relacionamento com im√≥vel")
    void deveValidarRelacionamentoComImovel() {
        System.out.println("üîó Testando relacionamento avalia√ß√£o-im√≥vel...");

        List<ValuationEntity> avaliacoes = repositoryValuation.findAll();
        
        if (!avaliacoes.isEmpty()) {
            ValuationEntity avaliacao = avaliacoes.get(0);
            
            System.out.println("üìà Avalia√ß√£o: R$ " + avaliacao.getValue());
            System.out.println("üè† Im√≥vel: " + avaliacao.getImovel().getNome_imovel());
            
            // VERIFICA SE O RELACIONAMENTO EST√Å CORRETO
            assertThat(avaliacao.getImovel()).isNotNull();
            assertThat(avaliacao.getImovel().getId_imovel()).isNotNull();
            assertThat(avaliacao.getImovel().getNome_imovel()).isNotNull();
            
            // TESTA SE CONSEGUE BUSCAR O IM√ìVEL PELO ID
            Optional<ImovelEntity> imovelEncontrado = repositoryImovel.findById(avaliacao.getImovel().getId_imovel());
            assertThat(imovelEncontrado).isPresent();
            
        } else {
            System.out.println("‚ö†Ô∏è Nenhuma avalia√ß√£o encontrada para testar relacionamento");
        }

        System.out.println("‚úÖ Teste de relacionamento passou!");
    }
}