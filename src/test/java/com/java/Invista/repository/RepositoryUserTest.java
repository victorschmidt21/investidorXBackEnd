package com.java.Invista.repository;

import com.java.Invista.entity.UserEntity;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.test.context.ActiveProfiles;

import java.util.List;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;

@DataJpaTest
@ActiveProfiles("test")
@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@DisplayName("Testes do RepositoryUser")
class RepositoryUserTest {

    @Autowired
    private RepositoryUser repositoryUser;

    @Test
    @Order(1)
    @DisplayName("Deve listar todos os usu√°rios existentes")
    void deveListarTodosOsUsuarios() {
        System.out.println("üë• Testando listagem de todos os usu√°rios...");

        // BUSCA TODOS OS USU√ÅRIOS QUE J√Å EXISTEM
        List<UserEntity> usuarios = repositoryUser.findAll();
        
        System.out.println("üìä Usu√°rios encontrados: " + usuarios.size());
        usuarios.forEach(u -> System.out.println("  - " + u.getUsername() + " (ID: " + u.getId() + ")"));
        
        // TESTE GEN√âRICO - s√≥ verifica se n√£o d√° erro
        assertThat(usuarios).isNotNull();
        
        if (!usuarios.isEmpty()) {
            assertThat(usuarios.get(0).getId()).isNotNull();
            assertThat(usuarios.get(0).getUsername()).isNotNull();
        }

        System.out.println("‚úÖ Teste de listagem passou!");
    }

    @Test
    @Order(2)
    @DisplayName("Deve contar total de usu√°rios")
    void deveContarTotalDeUsuarios() {
        System.out.println("üî¢ Testando contagem de usu√°rios...");

        long totalUsuarios = repositoryUser.count();
        
        System.out.println("üìä Total de usu√°rios no banco: " + totalUsuarios);
        
        assertThat(totalUsuarios).isGreaterThanOrEqualTo(0);

        System.out.println("‚úÖ Teste de contagem passou!");
    }

    @Test
    @Order(3)
    @DisplayName("Deve buscar usu√°rio por ID existente")
    void deveBuscarUsuarioPorIdExistente() {
        System.out.println("üîç Testando busca por ID existente...");

        // PEGA UM USU√ÅRIO QUE J√Å EXISTE
        List<UserEntity> usuarios = repositoryUser.findAll();
        
        if (!usuarios.isEmpty()) {
            UserEntity usuarioExistente = usuarios.get(0);
            String idExistente = usuarioExistente.getId();
            
            System.out.println("üéØ Buscando usu√°rio ID: " + idExistente);

            Optional<UserEntity> usuarioEncontrado = repositoryUser.findById(idExistente);
            
            assertThat(usuarioEncontrado).isPresent();
            assertThat(usuarioEncontrado.get().getId()).isEqualTo(idExistente);
            assertThat(usuarioEncontrado.get().getUsername()).isEqualTo(usuarioExistente.getUsername());
            
            System.out.println("‚úÖ Usu√°rio encontrado: " + usuarioEncontrado.get().getUsername());
        } else {
            System.out.println("‚ö†Ô∏è Nenhum usu√°rio no banco para testar busca por ID");
        }

        System.out.println("‚úÖ Teste de busca por ID passou!");
    }

    @Test
    @Order(4)
    @DisplayName("Deve retornar vazio para ID inexistente")
    void deveRetornarVazioParaIdInexistente() {
        System.out.println("üëª Testando busca por ID inexistente...");

        // USA ID QUE CERTAMENTE N√ÉO EXISTE
        Optional<UserEntity> usuarioInexistente = repositoryUser.findById("usuarioQueNaoExiste999");
        
        System.out.println("üìä Usu√°rio encontrado para ID inexistente: " + usuarioInexistente.isPresent());
        
        assertThat(usuarioInexistente).isEmpty();

        System.out.println("‚úÖ Teste com ID inexistente passou!");
    }

    @Test
    @Order(5)
    @DisplayName("Deve verificar se usu√°rio existe por ID")
    void deveVerificarSeUsuarioExistePorId() {
        System.out.println("‚úîÔ∏è Testando verifica√ß√£o de exist√™ncia...");

        List<UserEntity> usuarios = repositoryUser.findAll();
        
        if (!usuarios.isEmpty()) {
            UserEntity usuarioExistente = usuarios.get(0);
            String idExistente = usuarioExistente.getId();
            
            // TESTA ID QUE EXISTE
            boolean existe = repositoryUser.existsById(idExistente);
            System.out.println("üéØ Usu√°rio ID '" + idExistente + "' existe: " + existe);
            
            assertThat(existe).isTrue();
            
            // TESTA ID QUE N√ÉO EXISTE
            boolean naoExiste = repositoryUser.existsById("idInexistente999");
            System.out.println("üëª Usu√°rio ID 'idInexistente999' existe: " + naoExiste);
            
            assertThat(naoExiste).isFalse();
        } else {
            System.out.println("‚ö†Ô∏è Nenhum usu√°rio no banco para testar exist√™ncia");
        }

        System.out.println("‚úÖ Teste de verifica√ß√£o de exist√™ncia passou!");
    }

    @Test
    @Order(6)
    @DisplayName("Deve validar estrutura dos usu√°rios")
    void deveValidarEstruturaDoUsuario() {
        System.out.println("üèóÔ∏è Testando estrutura dos usu√°rios...");

        List<UserEntity> usuarios = repositoryUser.findAll();
        
        if (!usuarios.isEmpty()) {
            UserEntity usuario = usuarios.get(0);
            
            System.out.println("üìã Validando usu√°rio: " + usuario.getUsername());
            
            // VALIDA SE OS CAMPOS OBRIGAT√ìRIOS EXISTEM
            assertThat(usuario.getId()).isNotNull().isNotEmpty();
            assertThat(usuario.getUsername()).isNotNull().isNotEmpty();
            
            System.out.println("‚úÖ Estrutura v√°lida:");
            System.out.println("  - ID: " + usuario.getId());
            System.out.println("  - Username: " + usuario.getUsername());
            
        } else {
            System.out.println("‚ö†Ô∏è Nenhum usu√°rio no banco para validar estrutura");
        }

        System.out.println("‚úÖ Teste de estrutura passou!");
    }

    @Test
    @Order(7)
    @DisplayName("Deve validar que os m√©todos do repository funcionam")
    void deveValidarQueOsMetodosFuncionam() {
        System.out.println("üîß Testando todos os m√©todos b√°sicos...");

        // TESTA findAll()
        List<UserEntity> todosUsuarios = repositoryUser.findAll();
        System.out.println("üìã findAll(): " + todosUsuarios.size() + " usu√°rios");
        assertThat(todosUsuarios).isNotNull();

        // TESTA count()
        long total = repositoryUser.count();
        System.out.println("üî¢ count(): " + total);
        assertThat(total).isEqualTo(todosUsuarios.size());

        // TESTA existsById() com diferentes IDs
        if (!todosUsuarios.isEmpty()) {
            String primeiroId = todosUsuarios.get(0).getId();
            boolean existe = repositoryUser.existsById(primeiroId);
            System.out.println("‚úîÔ∏è existsById('" + primeiroId + "'): " + existe);
            assertThat(existe).isTrue();
        }

        // TESTA findById()
        if (!todosUsuarios.isEmpty()) {
            String primeiroId = todosUsuarios.get(0).getId();
            Optional<UserEntity> encontrado = repositoryUser.findById(primeiroId);
            System.out.println("üîç findById('" + primeiroId + "'): " + encontrado.isPresent());
            assertThat(encontrado).isPresent();
        }

        System.out.println("‚úÖ Todos os m√©todos funcionam corretamente!");
    }

    @Test
    @Order(8)
    @DisplayName("Deve validar IDs √∫nicos dos usu√°rios")
    void deveValidarIdsUnicosDoUsuarios() {
        System.out.println("üîë Testando unicidade dos IDs...");

        List<UserEntity> usuarios = repositoryUser.findAll();
        
        if (usuarios.size() > 1) {
            // VERIFICA SE OS IDs S√ÉO √öNICOS
            long idsUnicos = usuarios.stream()
                .map(UserEntity::getId)
                .distinct()
                .count();
            
            System.out.println("üìä Total de usu√°rios: " + usuarios.size());
            System.out.println("üîë IDs √∫nicos: " + idsUnicos);
            
            assertThat(idsUnicos).isEqualTo(usuarios.size());
            
            // VERIFICA SE OS USERNAMES S√ÉO √öNICOS
            long usernamesUnicos = usuarios.stream()
                .map(UserEntity::getUsername)
                .distinct()
                .count();
            
            System.out.println("üë§ Usernames √∫nicos: " + usernamesUnicos);
            
        } else {
            System.out.println("‚ö†Ô∏è Poucos usu√°rios para testar unicidade");
        }

        System.out.println("‚úÖ Teste de unicidade passou!");
    }
}