package com.java.Invista.service;

import com.java.Invista.entity.UserEntity;
import com.java.Invista.repository.RepositoryUser;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@DisplayName("Testes do UserService")
class UserServiceTest {

    @Mock
    private RepositoryUser repositoryUser;

    @InjectMocks
    private UserService userService;

    private UserEntity userEntity;

    @BeforeEach
    void setUp() {
        System.out.println("üèóÔ∏è Preparando dados de teste...");

        // CRIA USU√ÅRIO
        userEntity = new UserEntity();
        userEntity.setId("user123");
        userEntity.setUsername("Jo√£o Silva");

        System.out.println("‚úÖ Dados preparados!");
    }

    @Test
    @DisplayName("Deve criar usu√°rio")
    void deveCriarUsuario() {
        System.out.println("üë§ Testando cria√ß√£o de usu√°rio...");

        // CONFIGURA MOCK
        when(repositoryUser.save(userEntity)).thenReturn(userEntity);

        // EXECUTA
        UserEntity result = userService.create(userEntity);

        // VERIFICA RESULTADO
        assertThat(result).isNotNull();
        assertThat(result.getId()).isEqualTo("user123");
        assertThat(result.getUsername()).isEqualTo("Jo√£o Silva");

        // VERIFICA CHAMADA
        verify(repositoryUser, times(1)).save(userEntity);

        System.out.println("‚úÖ Cria√ß√£o funcionou!");
    }

    @Test
    @DisplayName("Deve criar usu√°rio com dados m√≠nimos")
    void deveCriarUsuarioComDadosMinimos() {
        System.out.println("üîß Testando usu√°rio com dados m√≠nimos...");

        // CRIA USU√ÅRIO COM DADOS M√çNIMOS
        UserEntity minimalUser = new UserEntity();
        minimalUser.setId("minimal123");

        // CONFIGURA MOCK
        when(repositoryUser.save(minimalUser)).thenReturn(minimalUser);

        // EXECUTA
        UserEntity result = userService.create(minimalUser);

        // VERIFICA RESULTADO
        assertThat(result).isNotNull();
        assertThat(result.getId()).isEqualTo("minimal123");

        // VERIFICA CHAMADA
        verify(repositoryUser, times(1)).save(minimalUser);

        System.out.println("‚úÖ Usu√°rio com dados m√≠nimos funcionou!");
    }

    @Test
    @DisplayName("Deve criar usu√°rio sem ID definido")
    void deveCriarUsuarioSemIdDefinido() {
        System.out.println("üÜî Testando usu√°rio sem ID...");

        // CRIA USU√ÅRIO SEM ID
        UserEntity noIdUser = new UserEntity();
        noIdUser.setUsername("Sem ID");
        // ID fica null

        // USU√ÅRIO RETORNADO COM ID GERADO
        UserEntity savedUser = new UserEntity();
        savedUser.setId("generated123");
        savedUser.setUsername("Sem ID");

        // CONFIGURA MOCK
        when(repositoryUser.save(noIdUser)).thenReturn(savedUser);

        // EXECUTA
        UserEntity result = userService.create(noIdUser);

        // VERIFICA RESULTADO
        assertThat(result).isNotNull();
        assertThat(result.getId()).isEqualTo("generated123");

        // VERIFICA CHAMADA
        verify(repositoryUser, times(1)).save(noIdUser);

        System.out.println("‚úÖ Usu√°rio sem ID funcionou!");
    }

    @Test
    @DisplayName("Deve propagar exce√ß√£o do repository")
    void devePropagarExcecaoDoRepository() {
        System.out.println("‚ùå Testando exce√ß√£o do repository...");

        // CONFIGURA MOCK PARA LAN√áAR EXCE√á√ÉO
        when(repositoryUser.save(any(UserEntity.class)))
            .thenThrow(new RuntimeException("Erro de banco de dados"));

        // EXECUTA E VERIFICA EXCE√á√ÉO
        assertThatThrownBy(() -> userService.create(userEntity))
            .isInstanceOf(RuntimeException.class)
            .hasMessage("Erro de banco de dados");

        // VERIFICA CHAMADA
        verify(repositoryUser, times(1)).save(userEntity);

        System.out.println("‚úÖ Exce√ß√£o propagada!");
    }

    @Test
    @DisplayName("Deve aceitar usu√°rio com todos os campos null")
    void deveAceitarUsuarioComTodosCamposNull() {
        System.out.println("üÜî Testando usu√°rio vazio...");

        // CRIA USU√ÅRIO VAZIO
        UserEntity emptyUser = new UserEntity();
        // Todos os campos ficam null

        // CONFIGURA MOCK
        when(repositoryUser.save(emptyUser)).thenReturn(emptyUser);

        // EXECUTA
        UserEntity result = userService.create(emptyUser);

        // VERIFICA RESULTADO
        assertThat(result).isNotNull();
        assertThat(result).isSameAs(emptyUser);

        // VERIFICA CHAMADA
        verify(repositoryUser, times(1)).save(emptyUser);

        System.out.println("‚úÖ Usu√°rio vazio funcionou!");
    }

    @Test
    @DisplayName("Deve criar usu√°rio com apenas email")
    void deveCriarUsuarioComApenasEmail() {
        System.out.println("üìß Testando usu√°rio s√≥ com email...");

        // CRIA USU√ÅRIO APENAS COM EMAIL
        UserEntity emailOnlyUser = new UserEntity();

        // CONFIGURA MOCK
        when(repositoryUser.save(emailOnlyUser)).thenReturn(emailOnlyUser);

        // EXECUTA
        UserEntity result = userService.create(emailOnlyUser);

        // VERIFICA RESULTADO
        assertThat(result).isNotNull();

        // VERIFICA CHAMADA
        verify(repositoryUser, times(1)).save(emailOnlyUser);

        System.out.println("‚úÖ Usu√°rio s√≥ com email funcionou!");
    }

    @Test
    @DisplayName("Deve criar usu√°rio com apenas nome")
    void deveCriarUsuarioComApenasNome() {
        System.out.println("üìù Testando usu√°rio s√≥ com nome...");

        // CRIA USU√ÅRIO APENAS COM NOME
        UserEntity nameOnlyUser = new UserEntity();
        nameOnlyUser.setUsername("Apenas Nome");

        // CONFIGURA MOCK
        when(repositoryUser.save(nameOnlyUser)).thenReturn(nameOnlyUser);

        // EXECUTA
        UserEntity result = userService.create(nameOnlyUser);

        // VERIFICA RESULTADO
        assertThat(result).isNotNull();

        // VERIFICA CHAMADA
        verify(repositoryUser, times(1)).save(nameOnlyUser);

        System.out.println("‚úÖ Usu√°rio s√≥ com nome funcionou!");
    }

    @Test
    @DisplayName("Deve retornar o mesmo objeto salvo pelo repository")
    void deveRetornarOMesmoObjetoSalvoPeloRepository() {
        System.out.println("üîÑ Testando retorno do objeto...");

        // CONFIGURA MOCK PARA RETORNAR OBJETO DIFERENTE
        UserEntity savedUser = new UserEntity();
        savedUser.setId("saved123");
        savedUser.setUsername("Nome Salvo");

        when(repositoryUser.save(userEntity)).thenReturn(savedUser);

        // EXECUTA
        UserEntity result = userService.create(userEntity);

        // VERIFICA QUE RETORNA O OBJETO DO REPOSITORY
        assertThat(result).isNotNull();
        assertThat(result).isSameAs(savedUser);
        assertThat(result.getId()).isEqualTo("saved123");
        assertThat(result.getUsername()).isEqualTo("Nome Salvo");

        // VERIFICA CHAMADA
        verify(repositoryUser, times(1)).save(userEntity);

        System.out.println("‚úÖ Retorno do objeto funcionou!");
    }

    @Test
    @DisplayName("Deve aceitar null como par√¢metro")
    void deveAceitarNullComoParametro() {
        System.out.println("‚ùå Testando null como par√¢metro...");

        // CONFIGURA MOCK PARA ACEITAR NULL
        when(repositoryUser.save(null)).thenReturn(null);

        // EXECUTA
        UserEntity result = userService.create(null);

        // VERIFICA RESULTADO
        assertThat(result).isNull();

        // VERIFICA CHAMADA
        verify(repositoryUser, times(1)).save(null);

        System.out.println("‚úÖ Null como par√¢metro funcionou!");
    }

    @Test
    @DisplayName("Deve tratar exce√ß√£o de valida√ß√£o")
    void deveTratarExcecaoDeValidacao() {
        System.out.println("‚ùå Testando exce√ß√£o de valida√ß√£o...");

        // CONFIGURA MOCK PARA LAN√áAR EXCE√á√ÉO DE VALIDA√á√ÉO
        when(repositoryUser.save(any(UserEntity.class)))
            .thenThrow(new IllegalArgumentException("Email inv√°lido"));

        // EXECUTA E VERIFICA EXCE√á√ÉO
        assertThatThrownBy(() -> userService.create(userEntity))
            .isInstanceOf(IllegalArgumentException.class)
            .hasMessage("Email inv√°lido");

        // VERIFICA CHAMADA
        verify(repositoryUser, times(1)).save(userEntity);

        System.out.println("‚úÖ Exce√ß√£o de valida√ß√£o tratada!");
    }
}